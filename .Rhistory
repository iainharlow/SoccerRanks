c(feature_names$V2[indices])
c(feature_names$V1[indices])
head(feature_names)
feature_names[indices,2])
feature_names[indices,2]
names(mean_std_data)<-c("ACTIVITY",feature_names[indices,2])
head(mean_std_data[,1:5])
names(mean_std_data)<-c("ACTIVITY",feature_names[indices_unsorted,2])
indices_unsorted<-rbind(mean_indices,std_indices)
indices<-indices_unsorted[order(indices_unsorted)]
names(mean_std_data)<-c("ACTIVITY",feature_names[indices_unsorted,2])
head(mean_std_data[,1:5])
c("ACTIVITY",feature_names[indices_unsorted,2])
c("ACTIVITY",feature_names[indices_unsorted,1])
c("ACTIVITY",feature_names[indices_unsorted[,1],2])
c("ACTIVITY",feature_names[indices_unsorted[,2],2])
View(testdata)
indices_unsorted<-rbind(mean_indices,std_indices)
mean_indices<-grep("mean()",feature_names$V2,fixed=T)
std_indices<-grep("std()",feature_names$V2,fixed=T)
indices_unsorted<-rbind(mean_indices,std_indices)
head(indices_unsorted)
indices_unsorted<-rbind(mean_indices[,1],std_indices[,1])
View(indices_unsorted)
rm(indices_unsorted)
indices_unsorted<-rbind(mean_indices[,1],std_indices[,1])
indices_unsorted<-rbind(mean_indices,std_indices)
?rbind
fulldata<-rbind(traindata,testdata)
mean_indices<-grep("mean()",feature_names$V2,fixed=T)
std_indices<-grep("std()",feature_names$V2,fixed=T)
indices_unsorted<-cbind(mean_indices,std_indices)
indices_unsorted<-cbind(mean_indices[1,],std_indices[1,])
indices_unsorted<-rbind(mean_indices,std_indices)
?append
indices_unsorted<-append(mean_indices,std_indices)
indices<-indices_unsorted[order(indices_unsorted)]
c("ACTIVITY",feature_names[indices_unsorted])
c("ACTIVITY",feature_names[indices_unsorted,2])
A<-c("a","B","c")
A(c(1,2))
A[c(1,2)]
c("ACTIVITY",feature_names[c(indices_unsorted),2])
head(mean_std_data[,1:5])
?rename
rename(mean_std_name, feature_names[c(indices_unsorted),2])
rename(mean_std_data, feature_names[c(indices_unsorted),2])
rename(mean_std_data[,2:67], feature_names[indices_unsorted])
feature_names[c(indices_unsorted),2]
names(mean_std_data)<-c("ACTIVITY",as.string(feature_names[c(indices_unsorted),2])
)
names(mean_std_data)<-c("ACTIVITY",as.character(feature_names[c(indices_unsorted),2]))
head(mean_std_data[1:5])
subject_train<-read.table("~/UCI HAR Dataset/train/subject_train.txt",header=F,sep="")
subject_test<-read.table("~/UCI HAR Dataset/test/subject_test.txt",header=F,sep="")
subject<-rbind(subject_train,subject_test)
SUBJECT<-rbind(subject_train,subject_test)
mean_std_data<-cbind(SUBJECT,mean_std_data)
head(mean_std_data[1:5])
SUBJECT<-rbind(subject_train,subject_test)[,1]
mean_std_data<-cbind(SUBJECT,mean_std_data)
head(mean_std_data[1:5])
mean_std_data<-fulldata[,indices]
mean_std_data<-cbind(ACTIVITY,mean_std_data)
names(mean_std_data)<-c("ACTIVITY",as.character(feature_names[c(indices),2]))
mean_std_data<-cbind(SUBJECT,mean_std_data)
head(mean_std_data[1:5])
?ddply
df <- ddply(x, .(SUBJECT,ACTIVITY),mean(x))
df <- ddply(mean_std_data, .(SUBJECT,ACTIVITY), .mean)
df <- ddply(mean_std_data, .(SUBJECT,ACTIVITY), mean)
warnings()
df
df <- ddply(complete.cases(mean_std_data), .(SUBJECT,ACTIVITY), mean)
complete.cases(mean_std_data)
df <- ddply(mean_std_data[complete.cases(mean_std_data)], .(SUBJECT,ACTIVITY), mean)
df <- ddply(mean_std_data[complete.cases(mean_std_data),], .(SUBJECT,ACTIVITY), mean)
warnings()
df <- ddply(mean_std_data[complete.cases(mean_std_data),3:68], .(SUBJECT,ACTIVITY), mean)
df <- ddply(mean_std_data[complete.cases(mean_std_data),3], .(SUBJECT,ACTIVITY), mean)
mean_std_data[complete.cases(mean_std_data),3]
head(mean_std_data[complete.cases(mean_std_data),3])
head(mean_std_data[,3])
df <- tapply(mean_std_data[complete.cases(mean_std_data),3:68],mean_std_data$SUBJECT,mean)
cleandata <- mean_std_data[complete.cases(mean_std_data)]
cleandata <- mean_std_data[complete.cases(mean_std_data),]
head(cleandata[1:7])
df <- ddply(cleandata[,3:68], .(SUBJECT,ACTIVITY), mean)
df <- tapply(cleandata[],3:68],cleandata$SUBJECT,mean)
df <- tapply(cleandata[,3:68],cleandata$SUBJECT,mean)
df <- ddply(cleandata[,3:68], groupedby(SUBJECT,ACTIVITY), summarize_each())
df <- ddply(cleandata[,3:68], grouped_by(SUBJECT,ACTIVITY), summarize_each())
?group_by
install.packages(dplyr)
install.packages("dplyr")
library(dplyr)
columns = c("SUBJECT","ACTIVITY")
ddply(cleandata, columns, summarize, value=mean(value))
?aggregate
df <- ddply(cleandata[,3:68], grouped_by(SUBJECT,ACTIVITY), summarize_each())
df <- ddply(cleandata[,3:68], columns, summarize_each())
df <- ddply(cleandata[,3:68], columns, mean())
df <- ddply(cleandata[,3:68], columns, mean(x))
df <- ddply(cleandata[,3:68], columns, .mean)
df <- ddply(cleandata[,3:68], columns, .fun = mean)
df
df <- ddply(cleandata[,3:68], columns, .fun = mean)
df <- ddply(as.numeric(cleandata[,3:68]), columns, .fun = mean)
write.table(df,"df.txt",row.name=F)
library(swirl)
rm(list=ls())
swirl()
mydf<-read.csv(path2csv,stringsAsFactors=F)
mydf<-read.csv(path2csv,stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran<-tbl_df(mydf)
rm("mydf")
cran
?manip
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran,-time)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran,package == "swirl")
(cran, r_version == "3.1.1", country == "US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country== "US" | country == "IN")
filter(cran, size>100500 & r_os == "linux-gnu")
filter(cran, size>100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran,!is.na(r_os))
filter(cran,!is.na(r_version))
cran2<-select(cran,size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3<-select(cran,ip_id,package,size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran,avg_bytes=mean(size))
library(dplyr)
cran<-tbl_df(mydf)
rm("mydf")
cra
cran
?group_by()
?group_by
by_package<-group_by(cran,package)
by_package
summarize(by_package,mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts<-filter(pack_sum,count>679)
top_counts
head(top_counts,20)
arrange(top_counts,desc(count)
)
quantile(pack_sum$unique, probs =
| 0.99)
quantile(pack_sum$unique, probs = 0.99)
top_unique<-filter(pack_sum,unique>465)
top_unique
arrange(top_unique,desc(unique)
)
submit()
submit()
submit()
submit()
?select()
submit()
submit()
submit()
?mutate
submit()
submit()
submit()
library(plyr)
library(dplyr)
# Step 1: Read in and merge training and test datasets.
# Be sure to place extracted data folder (UCI HAR Dataset) in working directory.
traindata<-read.table("~/UCI HAR Dataset/train/X_train.txt",header=F,sep="")
testdata<-read.table("~/UCI HAR Dataset/test/X_test.txt",header=F,sep="")
fulldata<-rbind(traindata,testdata)
feature_names<-read.table("~/UCI HAR Dataset/features.txt",header=F,sep="")
mean_indices<-grep("mean()",feature_names$V2,fixed=T)
std_indices<-grep("std()",feature_names$V2,fixed=T)
# Combine and sort both sets of indices:
indices_unsorted<-append(mean_indices,std_indices)
indices<-indices_unsorted[order(indices_unsorted)]
# Set mean_std_data to contain only these variables:
mean_std_data<-fulldata[,indices]
# Step 3: Relabel activities with names.
# Create activity column from y_train and y_test:
y_train<-read.table("~/UCI HAR Dataset/train/y_train.txt",header=F,sep="")
y_test<-read.table("~/UCI HAR Dataset/test/y_test.txt",header=F,sep="")
activity_labels<-read.table("~/UCI HAR Dataset/activity_labels.txt",header=F,sep="")
activity_code<-rbind(y_train,y_test)
#Convert activity codes to factors and relabel using activity_labels.txt:
activity_code[,1]<-as.factor(activity_code[,1])
activity_labels<-read.table("~/UCI HAR Dataset/activity_labels.txt",header=F,sep="")
levels(activity_code[,1]) <- activity_labels$V2
# Finally, append to first column of mean_std_data, labeled "ACTIVITY":
ACTIVITY<-activity_code[,1]
mean_std_data<-cbind(ACTIVITY,mean_std_data)
# Step 4: Relabel variable with descriptive names, taken from feature_names.
names(mean_std_data)<-c("ACTIVITY",as.character(feature_names[c(indices),2]))
# Step 5: Creates a second tidy data set with the average of each variable.
# Create subject column from subject_train and subject_test:
subject_train<-read.table("~/UCI HAR Dataset/train/subject_train.txt",header=F,sep="")
subject_test<-read.table("~/UCI HAR Dataset/test/subject_test.txt",header=F,sep="")
SUBJECT<-rbind(subject_train,subject_test)[,1]
mean_std_data<-cbind(SUBJECT,mean_std_data)
# Remove any missing values and convert to plyr format:
tidydata <- tbl_df(mean_std_data[complete.cases(mean_std_data),])
grouped_table<-group_by(tidydata,SUBJECT,ACTIVITY)
df<-summarize(grouped_table,mean(tBodyAcc-mean()-X:fBodyBodyGyroJerkMag-std()))
df<-summarize(grouped_table,mean(3:68))
df
df<-summarize(grouped_table,mean(names(select(tidydata,-SUBJECT,-ACTIVITY)))
)
?summarize
df<-summarize_each(grouped_table,funs(mean))
df<-summarise_each(grouped_table,funs(mean))
df
?write.table
write.table(df,"df.txt",row.name=FALSE)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
ytrain <- read.table("./train/y_train.txt", sep ="", header=FALSE)
getwd()
setwd("~/UCI HAR Dataset")
ytrain <- read.table("./train/y_train.txt", sep ="", header=FALSE)
ytest <- read.table("./test/y_test.txt", sep="", header=FALSE)
act_label <- read.table("activity_labels.txt", sep="", header=FALSE)
xtrain <- read.table("./train/X_train.txt", sep="", header=FALSE)
xtest <- read.table("./test/X_test.txt", sep="", header=FALSE)
feat_label <- read.table("features.txt", sep="", header=FALSE)
subject_train <- read.table("./train/subject_train.txt", sep="", header=FALSE)
subject_test <- read.table("./test/subject_test.txt", sep="", header=FALSE)
y <- rbind(ytrain,ytest)
colnames(y) <- c("Act_ID")
colnames(act_label) <- c("Act_ID", "Activities")
y_label <- data.frame(act_label[y$Act_ID,"Activities"])
colnames(y_label) <- c("Activities")
x <- rbind(xtrain, xtest)
colnames(x) <- feat_label[[2]]
subject <- rbind(subject_train, subject_test)
colnames(subject) <- c("Volunteers")
dataset <- cbind(subject,y_label)
dataset <- cbind(dataset, x)
reduce <- dataset[c(1,2,grep("mean\\(", colnames(dataset)),
grep("std\\(", colnames(dataset)))]
# Create an aggregate data set based on average
reduce.mean <- aggregate(reduce[3:68],
by = list(Volunteers=reduce$Volunteers,
Activities=reduce$Activities),
FUN=mean)
reduce.mean
head(reduce.mean[1:5])
source('C:/Users/Iain/Desktop/R/run_analysis_he.R')
run_analysis()
setwd(./)
setwd(C:/Users/Iain/Documents)
setwd("C:/Users/Iain/Documents")
run_analysis()
df2
## load the data
features <- read.table("./UCI HAR Dataset//features.txt",header=FALSE)
xtrain <- read.table("./UCI HAR Dataset/train/X_train.txt",header=FALSE)
ytrain <- read.table("./UCI HAR Dataset/train/Y_train.txt",header=FALSE)
subject_train <- read.table("./UCI HAR Dataset/train/subject_train.txt",header=FALSE)
xtest <- read.table("./UCI HAR Dataset/test/X_test.txt",header=FALSE)
ytest <- read.table("./UCI HAR Dataset/test/Y_test.txt",header=FALSE)
subject_test <- read.table("./UCI HAR Dataset/test/subject_test.txt",header=FALSE)
activity_labels <- read.table("./UCI HAR Dataset//activity_labels.txt", header=FALSE)
## merge the training and test sets to create one data set
x <- rbind(xtrain,xtest)
y <- rbind(ytrain,ytest)
subject <- rbind(subject_train,subject_test)
names(x) <- features[[2]]
names(y) <- "activity"
names(subject) <- "subject"
data <- cbind(x,subject,y)
remove(x,y,subject,xtrain,xtest,ytrain,ytest,subject_train,subject_test)
## extract only the measurements on the mean and standard deviation for each measurement
df <- data[,c(grep("mean|std|subject|activity",tolower(colnames(data))))]
## remove the angle entries (gravityMean) and meanFreq because they are not mean measurements
df <- df[,-grep("freq",tolower(colnames(df)))]
df <- df[,-grep("angle",tolower(colnames(df)))]
## name the activities in the data set with descriptive activity names
f <- factor(df$activity)
levels(f) <- activity_labels$V2
df$activity <- f
## label the data set with descriptive variable names
varNames <- colnames(df)
## eliminate hyphens and parentheses
varNames <- gsub("-","",varNames)
varNames <- gsub("mean[()][)]","Mean",varNames)
varNames <- gsub("std[()][)]","StandardDeviation",varNames)
## replace time and frequency at start of line
varNames <- gsub("^t","time",varNames)
varNames <- gsub("^f","frequency",varNames)
## replace accelerometer and gyroscope and magnitude
varNames <- gsub("Acc","Accelerometer",varNames)
varNames <- gsub("Gyro","Gyroscope",varNames)
varNames <- gsub("Mag","Magnitude",varNames)
## eliminate BodyBody mistake
varNames <- gsub("BodyBody","Body",varNames)
## reassign the names
names(df) <- varNames
## average each variable for each activity and subject
library(reshape2)
dfMelt <- melt(df,id.vars=c("subject","activity"))
df2 <- dcast(dfMelt,subject+activity~variable,mean)
df2
head(df2)
head(df2[1:5])
wd <- "C:/Users/Iain/Documents/GitHub/Soccer-Rank-Shiny-App"
setwd(wd)
filename <- c("intres.csv")
RESfull <- read.csv(filename)
# User parameters
begindate <- as.Date("11/21/2012",format="%m/%d/%Y")
enddate <- as.Date("11/21/2014",format="%m/%d/%Y")
date_halflife <- 365
margin_halflife <- 2
friendlies <- 0.5
stabweight <- 1
# Discard games outside boundary dates, calculate "date" weights
dbeta <- date_halflife/log(2)
RESfull$DATE <- as.Date(RESfull$DATE,format="%m/%d/%Y")
RESfull$AGO <- as.numeric(enddate-RESfull$DATE)
RES <- RESfull[RESfull$AGO>=0,]
RES <- RES[RES$DATE>=begindate,]
RES$W <- exp(-RES$AGO/dbeta)/dbeta
# Get unique teams
RES$HOME <- toupper(str_trim(as.character(RES$HOME)))
RES$AWAY <- toupper(str_trim(as.character(RES$AWAY)))
TEAMS <- unique(c(RES$HOME,RES$AWAY))
# Incorporate margin-of-victory weights
mbeta <- margin_halflife/log(2)
RES$MARGIN <- abs(RES$HG-RES$AG)
RES$W <- exp(-RES$MARGIN/mbeta)/mbeta*RES$W
# Incorporate friendly weights
fweights <- rep(1,nrow(RES))
fweights[RES$FRIENDLY==1] <- friendlies
RES$W <- fweights*RES$W
RES$W <- RES$W/mean(RES$W)
# Add dummy matches to stabilise parameters
s1 <- length(TEAMS)
#s2 <- length(TEAMS)*2+1
Gmean <- mean(c(RES$HG,RES$AG))
RESEXTRA <- RES[1:s1,]
RESEXTRA$HOME <- TEAMS
RESEXTRA$AWAY <- TEAMS
#RESEXTRA$AWAY[s2:s1] <- "DUMMY"  # Give dummy Att/Def values of 1/Gmean, so exp. score = 1-1
RESEXTRA[,c("HOMEADV","FRIENDLY")] <- 0
RESEXTRA[,c("HG","AG")] <- 1
RESEXTRA$W <- mean(RES$W)*stabweight
RESCALC <- rbind(RES,RESEXTRA)
# MLE Function
# Inputs:
# H is a vector of home scores (1 per match)
# A is a vector of away scores (1 per match)
# HT is a vector of home team indices (1 per match)
# AT is a vector of away team indices (1 per match)
# Att is a vector of team attack values (1 per team)
# Def is a vector of team defence values (1 per team)
# home is a 1/0 vector denoting home/neutral (1 per match)
# w is a vector of weights
mtmp <- function(tparams){
s<-(length(tparams)-1)/2
hadv<-tparams[1]
Att<-tparams[2:(s+1)]
Def<-tparams[(s+2):length(tparams)]
-sum((log(dpois(H,Att[HT]*Def[AT]*(hadv^home)))+log(dpois(A,Att[AT]*Def[HT]/(hadv^0))))*w)
}
# Real data:
H<-RESCALC$HG
A<-RESCALC$AG
HT<-as.factor(RESCALC$HOME)
AT<-as.factor(RESCALC$AWAY)
home<-RESCALC$HOMEADV
w<-RESCALC$W
homegoals <- RESCALC[c("HOME","HG","AG")]
awaygoals <- RESCALC[c("AWAY","AG","HG")]
names(homegoals) <- c("TEAM","F","A")
names(awaygoals) <- c("TEAM","F","A")
allgoals <- rbind(homegoals,awaygoals)
gpd_goals <- group_by(allgoals,TEAM)
avg <- summarise_each(gpd_goals,funs(mean))
attstart<-avg$F
defstart<-avg$A
paramstart<-c(1.18,attstart,defstart)
parambasic<-rep(1,length(paramstart))
suppressWarnings(suppressMessages(library(grid))) # For plotting
suppressWarnings(suppressMessages(library(gridExtra))) # For plotting
suppressWarnings(suppressMessages(library(quantmod))) # CPI data
suppressWarnings(suppressMessages(library(plyr))) # Working with tidy data
suppressWarnings(suppressMessages(library(dplyr))) # Working with tidy data
suppressWarnings(suppressMessages(library(reshape2))) # Reshaping tables
suppressWarnings(suppressMessages(library(scales))) # For plotting
suppressWarnings(suppressMessages(library(ggplot2))) # For plotting
suppressWarnings(suppressMessages(library(stringr))) # For manipulating strings
wd <- "C:/Users/Iain/Documents/GitHub/Soccer-Rank-Shiny-App"
setwd(wd)
filename <- c("intres.csv")
RESfull <- read.csv(filename)
# User parameters
begindate <- as.Date("11/21/2012",format="%m/%d/%Y")
enddate <- as.Date("11/21/2014",format="%m/%d/%Y")
date_halflife <- 365
margin_halflife <- 2
friendlies <- 0.5
stabweight <- 1
# Discard games outside boundary dates, calculate "date" weights
dbeta <- date_halflife/log(2)
RESfull$DATE <- as.Date(RESfull$DATE,format="%m/%d/%Y")
RESfull$AGO <- as.numeric(enddate-RESfull$DATE)
RES <- RESfull[RESfull$AGO>=0,]
RES <- RES[RES$DATE>=begindate,]
RES$W <- exp(-RES$AGO/dbeta)/dbeta
# Get unique teams
RES$HOME <- toupper(str_trim(as.character(RES$HOME)))
RES$AWAY <- toupper(str_trim(as.character(RES$AWAY)))
TEAMS <- unique(c(RES$HOME,RES$AWAY))
# Incorporate margin-of-victory weights
mbeta <- margin_halflife/log(2)
RES$MARGIN <- abs(RES$HG-RES$AG)
RES$W <- exp(-RES$MARGIN/mbeta)/mbeta*RES$W
# Incorporate friendly weights
fweights <- rep(1,nrow(RES))
fweights[RES$FRIENDLY==1] <- friendlies
RES$W <- fweights*RES$W
RES$W <- RES$W/mean(RES$W)
# Add dummy matches to stabilise parameters
s1 <- length(TEAMS)
#s2 <- length(TEAMS)*2+1
Gmean <- mean(c(RES$HG,RES$AG))
RESEXTRA <- RES[1:s1,]
RESEXTRA$HOME <- TEAMS
RESEXTRA$AWAY <- TEAMS
#RESEXTRA$AWAY[s2:s1] <- "DUMMY"  # Give dummy Att/Def values of 1/Gmean, so exp. score = 1-1
RESEXTRA[,c("HOMEADV","FRIENDLY")] <- 0
RESEXTRA[,c("HG","AG")] <- 1
RESEXTRA$W <- mean(RES$W)*stabweight
RESCALC <- rbind(RES,RESEXTRA)
# MLE Function
# Inputs:
# H is a vector of home scores (1 per match)
# A is a vector of away scores (1 per match)
# HT is a vector of home team indices (1 per match)
# AT is a vector of away team indices (1 per match)
# Att is a vector of team attack values (1 per team)
# Def is a vector of team defence values (1 per team)
# home is a 1/0 vector denoting home/neutral (1 per match)
# w is a vector of weights
mtmp <- function(tparams){
s<-(length(tparams)-1)/2
hadv<-tparams[1]
Att<-tparams[2:(s+1)]
Def<-tparams[(s+2):length(tparams)]
-sum((log(dpois(H,Att[HT]*Def[AT]*(hadv^home)))+log(dpois(A,Att[AT]*Def[HT]/(hadv^0))))*w)
}
# Real data:
H<-RESCALC$HG
A<-RESCALC$AG
HT<-as.factor(RESCALC$HOME)
AT<-as.factor(RESCALC$AWAY)
home<-RESCALC$HOMEADV
w<-RESCALC$W
homegoals <- RESCALC[c("HOME","HG","AG")]
awaygoals <- RESCALC[c("AWAY","AG","HG")]
names(homegoals) <- c("TEAM","F","A")
names(awaygoals) <- c("TEAM","F","A")
allgoals <- rbind(homegoals,awaygoals)
gpd_goals <- group_by(allgoals,TEAM)
avg <- summarise_each(gpd_goals,funs(mean))
attstart<-avg$F
defstart<-avg$A
paramstart<-c(1.18,attstart,defstart)
parambasic<-rep(1,length(paramstart))
mtmp(paramstart)
mtmp(parambasic)
system.time(model<-optim(tparams <- paramstart, mtmp, control=(maxit=5),hessian=TRUE))
system.time(model<-nlm(paramstart, mtmp, steptol=1e-4,gradtol=1e-4))
system.time(model<-nlm(mtmp, paramstart, steptol=1e-4,gradtol=1e-4))
summary(model$estimate)
summary(model$estimate[2:201])
summary(model$estimate[202:401])
mtmp(paramstart)
mtmp(parambasic)
mtmp(model$estimate)
Teampower <- arrange(df("TEAMS"=TEAMS,"PWR"=model$estimate[2:201]/model$estimate[202:401]),desc(PWR))
Teampower <- arrange(data.frame("TEAMS"=TEAMS,"PWR"=model$estimate[2:201]/model$estimate[202:401]),desc(PWR))
View(Teampower)
